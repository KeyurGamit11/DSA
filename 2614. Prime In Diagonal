Input: nums = [[1,2,3],[5,6,7],[9,10,11]]
Output: 11
Explanation: The numbers 1, 3, 6, 9, and 11 are the only numbers present on at least one of the diagonals. Since 11 is the largest prime, we return 11.
#code:
class Solution {
private:
   bool prime(int n){
    if(n<2)return false;
    for(int i=2; i*i<=n; i++){
        if(n%i==0){
            return false;
        }
    }
    return true;
   }
public:
    int diagonalPrime(vector<vector<int>>& nums) {
        int ans=0;
        int n=nums.size();
        for(int i=0; i<nums.size(); i++){
            if(prime(nums[i][i])){
                ans = max(ans , nums[i][i]); //for first diagonal
            }
            if(prime(nums[i][n-i-1])){
                ans = max(ans,nums[i][n-i-1]); // for another diagonal
            }
        }
        return ans;
    }
};
