Input: nums = [1,4,3,3,2]
Output: 2
Explanation:
The strictly increasing subarrays of nums are [1], [2], [3], [3], [4], and [1,4].
The strictly decreasing subarrays of nums are [1], [2], [3], [3], [4], [3,2], and [4,3].
Hence, we return 2.
#code:
class Solution {
private:
    int increase(vector<int>& nums,int i, int j){
        int cnt=1;
        for(int k=i; k<j; k++){
            if(nums[k] < nums[k+1]){
                cnt++;
            }
            else{
                break;
            }
        }
        return cnt;
    }
    int decrease(vector<int>& nums,int i, int j){
        int cnt=1;
        for(int k=i; k<j; k++){
            if(nums[k] > nums[k+1]){
                cnt++;
            }
            else{
                break;
            }
        }
        return cnt;
    }
public:
    int longestMonotonicSubarray(vector<int>& nums) {
        int ans=1;
        int n=nums.size();
        for(int i=0; i<nums.size(); i++){
            
            int Increasing = increase(nums,i,n-1);
            int Decreasing = decrease(nums,i,n-1);
            ans = max(ans , max(Increasing , Decreasing));
            
        }
        return ans;
    }
};
