Input
["RandomizedSet", "insert", "remove", "insert", "getRandom", "remove", "insert", "getRandom"]
[[], [1], [2], [2], [], [1], [2], []]
Output
[null, true, false, true, 2, true, false, 2]
#code:
class RandomizedSet {
public:
    vector<int>v;
    unordered_map<int,int>map;
    int index = 0;
    RandomizedSet() {
        index = 0;
        v.clear();
        map.clear();
    }
    
    bool insert(int val) {
        if(map.find(val) != map.end()){
              return false; // that means value found
        }
        // if not found add in map
        map[val]= index++;
        v.push_back(val);
        return true;

    }
    
    bool remove(int val) {
        if(map.find(val) == map.end()){
            return false; // if val  not fund
        }
        // if found then get ind
        int i = map[val];
        //swap with last element
        swap(v[i] , v[index-1]);
        map[v[i]]= i; // update index
        //remove
        v.pop_back(); // pop last element
        index--;
        map.erase(val);
        return true;
    }
    
    int getRandom() {
        int i = rand()%index;
        return v[i];
    }
};

/**
 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet* obj = new RandomizedSet();
 * bool param_1 = obj->insert(val);
 * bool param_2 = obj->remove(val);
 * int param_3 = obj->getRandom();
 */
