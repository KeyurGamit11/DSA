Input: nums = [4,1,3,3]
Output: 5
Explanation: The pair (0, 1) is a bad pair since 1 - 0 != 1 - 4.
The pair (0, 2) is a bad pair since 2 - 0 != 3 - 4, 2 != -1.
The pair (0, 3) is a bad pair since 3 - 0 != 3 - 4, 3 != -1.
The pair (1, 2) is a bad pair since 2 - 1 != 3 - 1, 1 != 2.
The pair (2, 3) is a bad pair since 3 - 2 != 3 - 3, 1 != 0.
There are a total of 5 bad pairs, so we return 5.
#code:
class Solution {
#define ll long long
public:
    long long countBadPairs(vector<int>& nums) {
        ll ans=0;
        ll n=nums.size() , goodPairs=0;
        ll totalPairs = n*(n-1)/2;
        unordered_map<int,ll>freq;

        //cnt number of good pairs
        for(ll i=0; i<n; i++){
            goodPairs += freq[i-nums[i]]; //check how many time i-nums[i] before occur
            freq[i-nums[i]]++; //update i-nums[i] in map
        }
        ans = totalPairs - goodPairs;
        return ans;
    }
};
