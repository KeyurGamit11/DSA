Input: arr = [3,3,3,3,5,5,5,2,2,7]
Output: 2
Explanation: Choosing {3,7} will make the new array [5,5,5,2,2] which has size 5 (i.e equal to half of the size of the old array).
Possible sets of size 2 are {3,5},{3,2},{5,2}.
Choosing set {2,7} is not possible as it will make the new array [3,3,3,3,5,5,5] which has a size greater than half of the size of the old array.
#code:
class Solution {
public:
    int minSetSize(vector<int>& arr) {
        unordered_map<int,int>mp;
        int n = arr.size();
        for(auto &i:arr){
            mp[i]++;
        }
        priority_queue<int>pq; //store max freq in pq
        for(auto &[key,count]:mp){
           pq.push(count);
        }
        int Remove_element=0 , target = n/2 , Choose_element=0;
        while(Remove_element < target){
            Remove_element += pq.top();
            pq.pop();
            Choose_element++;
        }
        return Choose_element;
    }
};
