Input: nums = [1,3,5,4,7]
Output: 3
Explanation: The longest continuous increasing subsequence is [1,3,5] with length 3.
Even though [1,3,5,7] is an increasing subsequence, it is not continuous as elements 5 and 7 are separated by element
4.
#code:
class Solution {
public:
    int findLengthOfLCIS(vector<int>& nums) {
        int l=0,r=0,max_len=0;
        int n=nums.size();
        
        while(r < n-1){
            if(nums[r] >= nums[r+1]){
                int len = r-l+1;
                max_len = max(len , max_len);
                l = r+1;
            }
            r++;
        }
        max_len = max(r-l+1 , max_len);
        return max_len;
    }
};
