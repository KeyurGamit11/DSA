Input: nums = [5,2,3,1]
Output: [1,2,3,5]
Explanation: After sorting the array, the positions of some numbers are not changed (for example, 2 and 3), while the positions of other numbers are changed (for example, 1 and 5).
#step:we are doing merge sort here
#code:
class Solution {
private:

    void merge(vector<int>& nums ,int start ,int mid, int end){
        vector<int>temp; //take temp vect
        int left=start; // left index at satrt 
        int right = mid+1; //right index at mid+1 
        //merge two array
        while(left <= mid && right <= end){
            if(nums[left] <= nums[right]){
                temp.push_back(nums[left]);
                left++;
            }
            else{
                temp.push_back(nums[right]);
                right++;
            }
        }
        //if left array element is still left
        while(left <= mid){
            temp.push_back(nums[left]);
            left++;
        }
        //if right array element is still left
        while(right <= end){
            temp.push_back(nums[right]);
            right++;
        }
        // transfore temp element in nums
        for(int i=start; i<=end; i++){
            nums[i] = temp[i-start];
        }
    }
    void mergesort(vector<int>& nums ,int start , int end){
        //base case
        if(start >= end){
            return;
        }
        int mid = start + (end-start)/2;
        //recursive call
        mergesort(nums,start , mid); //left part 
        mergesort(nums,mid+1,end); //right part
        merge(nums,start,mid,end); //merge right , left part
    }  
public:
    vector<int> sortArray(vector<int>& nums) {
        int n= nums.size();
        mergesort(nums,0,n-1);
        return nums;
    }
};
