Input: nums = [1,3,2,3,3], k = 2
Output: 6
Explanation: The subarrays that contain the element 3 at least 2 times are: [1,3,2,3], [1,3,2,3,3], [3,2,3], [3,2,3,3], [2,3,3] and [3,3].
#code:
class Solution {
public:
    long long countSubarrays(vector<int>& nums, int k) {
        long long maxi = *max_element(nums.begin(),nums.end());
        long long l=0,r=0,n=nums.size(),ans=0,cnt=0;
        while(r<n){
            if(nums[r]==maxi){
                cnt++;
            }
            while(cnt>=k){
                ans += (n-r); //if the window is correct take all window till n
                if(nums[l]==maxi){
                    cnt--;
                }
                l++;
            }
            r++;
        }
        return ans;
    }
};
