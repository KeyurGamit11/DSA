Input: target = 7, nums = [2,3,1,2,4,3]
Output: 2
Explanation: The subarray [4,3] has the minimal length under the problem constraint.
#code:
class Solution {
public:
    int minSubArrayLen(int target, vector<int>& nums) {
        int start=0;
        int total=0;
        int result = nums.size()+1;
        for(int i=0; i<nums.size(); i++){
            total += nums[i]; //sum all val 
            while(total >= target){
                result = min(i-start+1 , result); //subarray size that sum equal or greater than target
                total -= nums[start]; //before increment start er decrement curr start val from total
                start += 1;  //if sub array sum equal to target we increment start
            }
        }
        if(result == nums.size()+1){
            return 0;
        }
        else{
            return result;
        }
    }
};
