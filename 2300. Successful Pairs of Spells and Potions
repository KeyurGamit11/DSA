Input: spells = [5,1,3], potions = [1,2,3,4,5], success = 7
Output: [4,0,3]
Explanation:
- 0th spell: 5 * [1,2,3,4,5] = [5,10,15,20,25]. 4 pairs are successful.
- 1st spell: 1 * [1,2,3,4,5] = [1,2,3,4,5]. 0 pairs are successful.
- 2nd spell: 3 * [1,2,3,4,5] = [3,6,9,12,15]. 3 pairs are successful.
Thus, [4,0,3] is returned.
#code:
class Solution {
private:
    int BinarySearch(vector<int>& potions,long long n , long long success){
        int i = 0 , j=potions.size()-1;
        int ind=-1;
        while(i<=j){
            int mid = (i+j)/2;
            long long num = potions[mid]*n;
            if(num >= success){
                ind = mid;
                j = mid - 1;
            }else{
                i = mid +1;
            }
        }
        return ind;
    }
public:
    vector<int> successfulPairs(vector<int>& spells, vector<int>& potions, long long success) {
        vector<int>ans;
        sort(potions.begin(),potions.end());
        int n = spells.size();
        int m = potions.size();
        for(int i=0; i<spells.size(); i++){
            long long ind = BinarySearch(potions,spells[i],success);
            if(ind==-1){
                ans.push_back(0);
            }else{
                long long s = m-ind;
                ans.push_back(s);
            }
            
        }
        return ans;
    }
};
