Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
#code:
class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        
        unordered_map<int,int>mp;
        vector<int>ans;
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq; //min heap pair
        for(auto &i:nums){
            mp[i]++;
        }
        for(auto &[num,freq]:mp){
            pq.push({freq,num}); //push frq,num so min heap is based on freq
            if(pq.size()>k){ //make k size min heap , pop top if pq.size()>k
                pq.pop();
            }
        }
        //take element from pq into ans vector
        while(!pq.empty()){
            ans.push_back(pq.top().second);
            pq.pop();
        }
        
        return ans;
    }
};
