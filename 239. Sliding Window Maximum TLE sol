Input: nums = [1,3,-1,-3,5,3,6,7], k = 3
Output: [3,3,5,5,6,7]
Explanation: 
Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7
#code:
class Solution {
private:
    int max_element(int start , int end ,vector<int>&nums){
        int maxi=INT_MIN;
        for(int i=start; i<=end; i++){
            maxi = max(nums[i],maxi);
        }
        return maxi;
    }
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        vector<int>ans;
        int l=0,r=0,n=nums.size();
        while(r < n){
            if(r - l + 1 == k){
                //cout<<l<<" "<<r<<endl;
                int maxi = max_element(l ,r ,nums);
                ans.push_back(maxi);
                l++;
            }
            r++;
        }
        return ans;   
    }
};
