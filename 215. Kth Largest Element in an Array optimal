Input: nums = [3,2,1,5,6,4], k = 2
Output: 5
#code:
class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        priority_queue<int,vector<int>,greater<int>>pq; //min heap
        //step:1 push k element in pq
        for(int i=0; i<k; i++){
            pq.push(nums[i]);
        }
        //step 2: if curr element is greater than pq.top , pop and push curr elemenet
        for(int i=k; i<nums.size(); i++){
            if(nums[i] > pq.top()){
                pq.pop();
                pq.push(nums[i]);
            }
        }
        return pq.top();
    }
};
