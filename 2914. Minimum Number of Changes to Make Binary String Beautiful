#step: check 2 substring , check i and i+1 if same means no change if not need to convert like 10 we need to change 11 make 1 moves

Input: s = "1001"
Output: 2
Explanation: We change s[1] to 1 and s[3] to 0 to get string "1100".
It can be seen that the string "1100" is beautiful because we can partition it into "11|00".
It can be proven that 2 is the minimum number of changes needed to make the string beautiful.
#code:
class Solution {
public:
    int minChanges(string s) {
        int cnt=0;
        for(int i=0; i<s.size(); i+=2){
            if(s[i]!=s[i+1]){
                cnt++;
            }
        }
        return cnt;
    }
};
