Input: arr = [1,3,5]
Output: 4
Explanation: All subarrays are [[1],[1,3],[1,3,5],[3],[3,5],[5]]
All sub-arrays sum are [1,4,9,3,8,5].
Odd sums are [1,9,3,5] so the answer is 4.
#code:
class Solution {
public:
    int numOfSubarrays(vector<int>& arr) {
        const int MOD = 1e9 + 7;
        int ans=0;
        int Odd_cnt=0,Even_cnt=1;
        int pref_sum=0,r=0;
        int n = arr.size();
        while(r < n){
            pref_sum += arr[r];
            if(pref_sum % 2 == 0){
                ans = (ans+Odd_cnt) % MOD; //so if pref_sum is even we need odd element to make sum odd we  track odd
                Even_cnt++;
            }
            else if(pref_sum % 2 != 0){
                ans = (ans+ Even_cnt) % MOD;  //if pref_sum is odd we need even element to make sum odd we track that
                Odd_cnt++;
            }
            r++;
        }
        return ans%MOD;
    }
};
