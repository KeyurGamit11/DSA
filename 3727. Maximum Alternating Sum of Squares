Input: nums = [1,-1,2,-2,3,-3]
Output: 16
Explanation:
A possible rearrangement for nums is [-3,-1,-2,1,3,2], which gives the maximum alternating score among all possible rearrangements.
The alternating score is calculated as:
score = (-3)2 - (-1)2 + (-2)2 - (1)2 + (3)2 - (2)2 = 9 - 1 + 4 - 1 + 9 - 4 = 163
#code:
class Solution {
public:
    long long maxAlternatingSum(vector<int>& nums) {
        long long sum = 0;
        vector<int> ans;
        int n = nums.size();
        for (int k = 0; k < n; k++) {
            if (nums[k] < 0)
                nums[k] = -nums[k];
        }
        sort(nums.begin(),nums.end());
        int i = 0, j = n - 1;
        while (i < j) {
            ans.push_back(nums[j]);
            j--;
            ans.push_back(nums[i]);
            i++;
        }
        if (i == j) {
            ans.push_back(nums[i]);
        }
        for (int i = 0; i < ans.size(); i++) {
            if (i % 2 == 0) {
                sum += (ans[i] * ans[i]);
            } else {
                sum -= (ans[i] * ans[i]);
            }
        }
        return sum;
    }
};
