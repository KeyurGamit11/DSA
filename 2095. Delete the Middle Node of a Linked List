Input: head = [1,3,4,7,1,2,6]
Output: [1,3,4,1,2,6]
Explanation:
The above figure represents the given linked list. The indices of the nodes are written below.
Since n = 7, node 3 with value 7 is the middle node, which is marked in red.
We return the new list after removing this node.
#step :
so first we have to find node before the middle node 
for that we use slow and fast pointer method
but in this we do this step 
first pass slow stay on head , fast move to 2 
in seconde pass = slow  move 1 time , fast move 2 time untill fast reach to null
then we get slow at before middle node and we do process
#code :
class Solution {
public:
    ListNode* deleteMiddle(ListNode* head) {
        //edge case 
        if(head == NULL || head -> next == NULL){
            return NULL;
        }
        //use two pointer slow and fast method
        ListNode* slow = head;
        ListNode* fast = head;

         fast = head -> next -> next;
        while(fast != NULL && fast -> next != NULL){
            slow = slow -> next;
            fast = fast -> next -> next;
        }    
        ListNode* MiddleNode = slow -> next;
        slow -> next = slow -> next -> next;   // slow point to the next node
        delete(MiddleNode); // delete
        return head;
    }
};
