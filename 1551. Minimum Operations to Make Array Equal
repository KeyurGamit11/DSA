Input: n = 3
Output: 2
Explanation: arr = [1, 3, 5]
First operation choose x = 2 and y = 0, this leads arr to be [2, 3, 4]
In the second operation choose x = 2 and y = 0 again, thus arr = [3, 3, 3].
#code:
class Solution {
public:
    int minOperations(int n) {
        vector<int>ans;
        for(int i=0; i<n; i++){
            ans.push_back((2*i) + 1);

        } //buiding array
        //dry run it
        int i=0,j=ans.size()-1;
        int cnt=0; //so we have only odd num so if we choose i and j  where i can increment by one j decrement by one
        //so total op for make equal i and j would be abs(i-j)/2 , dry run for better understanding
        while(i<j){
            cnt += (ans[j]-ans[i])/2;
            i++;
            j--;
        }
        
        return cnt;
    }
};
