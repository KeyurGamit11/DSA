Input: nums = [2,11,10,1,3], k = 10
Output: 2
Explanation: In the first operation, we remove elements 1 and 2, then add 1 * 2 + 2 to nums. nums becomes equal to [4, 11, 10, 3].
In the second operation, we remove elements 3 and 4, then add 3 * 2 + 4 to nums. nums becomes equal to [10, 11, 10].
At this stage, all the elements of nums are greater than or equal to 10 so we can stop.
It can be shown that 2 is the minimum number of operations needed so that all elements of the array are greater than or equal to 10.
#code:
//Hint:
//push element in min heap, take two element from it (they will be tewo smallest)
//take both and add new element Add min(x, y) * 2 + max(x, y) this and do ans++

class Solution {
public:
    int minOperations(vector<int>& nums, int k) {
        int n = nums.size();
        priority_queue<long long,vector<long long>,greater<long long>>pq;
        for(long long num:nums){
            pq.push(num);
        }
        long long ans=0;
        
        while(pq.top() < k && pq.size()>1){ //pq size should be > 1
            long long num1 = pq.top();
            pq.pop();
            long long num2 = pq.top();
            pq.pop();
            long long new_element = min(num1,num2)*2 + max(num1,num2);
           
            pq.push(new_element);
            ans++;
        }
        return ans;
    }
};
