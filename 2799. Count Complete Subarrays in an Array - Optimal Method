Input: nums = [1,3,1,2,2]
Output: 4
Explanation: The complete subarrays are the following: [1,3,1,2], [1,3,1,2,2], [3,1,2] and [3,1,2,2].
#Optimal using map d.s
#code:
class Solution {
public:
    int countCompleteSubarrays(vector<int>& nums) {
        unordered_set<int>st;
        for(auto &i:nums){
            st.insert(i);
        }
        int Distinct = st.size();
        int ans=0,r=0,l=0,n=nums.size();
        unordered_map<int,int>mp;
        while(r<n){
            mp[nums[r]]++;
            while(mp.size()==Distinct){
                ans += (n-r); //take full count till end of nums
                mp[nums[l]]--;
                if(mp[nums[l]]==0){
                    mp.erase(nums[l]); //means 0 freq of that element so we remove from map
                }
                l++;
            }
            r++;
        }
        return ans;
    }
};
