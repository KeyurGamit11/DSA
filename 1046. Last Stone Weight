Input: stones = [2,7,4,1,8,1]
Output: 1
Explanation: 
We combine 7 and 8 to get 1 so the array converts to [2,4,1,1,1] then,
we combine 2 and 4 to get 2 so the array converts to [2,1,1,1] then,
we combine 2 and 1 to get 1 so the array converts to [1,1,1] then,
we combine 1 and 1 to get 0 so the array converts to [1] then that's the value of the last stone.
#code:
class Solution {
public:
    int lastStoneWeight(vector<int>& stones) {
        priority_queue<int>pq;
        for(auto &i:stones){
            pq.push(i);
        }
        while(pq.size()>1){
            int highest = pq.top();
            pq.pop();
            int sechigh = pq.top();
            pq.pop();   //pop high and sec high
            if(highest != sechigh){
                pq.push(highest - sechigh); //push diff between both
            }
        }
        if(pq.empty()){
            return 0;
        }
        return pq.top();
    }
};
