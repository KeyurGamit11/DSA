Example 1:
Input: s = "leet**cod*e"
Output: "lecoe"
Explanation: Performing the removals from left to right:
- The closest character to the 1st star is 't' in "leet**cod*e". s becomes "lee*cod*e".
- The closest character to the 2nd star is 'e' in "lee*cod*e". s becomes "lecod*e".
- The closest character to the 3rd star is 'd' in "lecod*e". s becomes "lecoe".
There are no more stars, so we return "lecoe".
#step:
in this problem we have to remove one element if we found * in
so we use stack for that 
simple step if we found * we pop one element if not we just push into stack
#code:
class Solution {
public:
    string removeStars(string s) {
        stack<int>s1;
        string str;
        for(int i=0; i<s.length(); i++){
            if(!s1.empty() && s[i] == '*'){ //* is found
                s1.pop();
            }
            else if(s[i] != '*'){ // * not found
                s1.push(s[i]);
            }
        }
        while(!s1.empty()){
            str.push_back(s1.top());
            s1.pop();
        }
        reverse(str.begin() , str.end()); // we have to reverse in because stack reverse the string
        return str;
    }
};
