Input: nums = [2,4,8,16]
Output: 64
Explanation:
On removing 2, the GCD of the rest of the elements is 4 while the LCM is 16, which gives a maximum factor score of 4 * 16 = 64.
#code:
class Solution {
private:
    long long gcd(long long a, long long b) {
        return b == 0 ? a : gcd(b, a % b);
    }
    long long lcm(long long a, long long b) { return (a / gcd(a, b)) * b; }

public:
    long long maxScore(vector<int>& nums) {
        long long ans1 = nums[0];
        long long ans2 = nums[0];
        long long ans = 0; //first loop for all element
        for (int i = 1; i < nums.size(); i++) {

            ans1 = gcd(nums[i], ans1);
            ans2 = lcm(nums[i], ans2);
        }
        ans = ans1 * ans2;  //this is for after remove one element count all possiblity and take max product
        for (int i = 0; i < nums.size(); i++) {
            long long ans3 = 0, ans4 = 1;
            for (int j = 0; j < nums.size(); j++) {
                if (i != j) {
                    ans3 = gcd(ans3, nums[j]);
                    ans4 = lcm(ans4, nums[j]);
                }
            }
            ans = max(ans, ans3 * ans4);
        }
        // cout<<ans<<endl;
        return ans;
    }
};
