Given the array of integers nums, you will choose two different indices i and j of that array. Return the maximum value of (nums[i]-1)*(nums[j]-1).
 
Example 1:
Input: nums = [3,4,5,2]
Output: 12 
Explanation: If you choose the indices i=1 and j=2 (indexed from 0), you will get the maximum value, that is, (nums[1]-1)*(nums[2]-1) = (4-1)*(5-1) = 3*4 = 12.

#brute sol:
step:
1)simply using two loop and put equation (nums[i]-1)*(nums[j]-1) and store in max
#code :
class Solution {
public:
    int maxProduct(vector<int>& nums) {
        int n= nums.size();
        int max =0;
        for(int i=0; i<n; i++){
            for(int j=i+1; j<n; j++){
             
             int ans = (nums[i]-1)*(nums[j]-1);
             if (ans > max){
                 max = ans;
             } 
            }
        }
        return max;
    }
};


# optimal sol:
step:
sort array and take i = n-1 and j = n-2 and just apply equation  (nums[i]-1)*(nums[j]-1) 
code:
class Solution {
public:
    int maxProduct(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        int n=nums.size();
        int i=n-1;
        int j=n-2;
        int ans=(nums[i]-1)*(nums[j]-1);
        return ans;
    }
};







