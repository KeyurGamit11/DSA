Input: nums = [1,3,0,0,2,0,0,4]
Output: 6
Explanation: 
There are 4 occurrences of [0] as a subarray.
There are 2 occurrences of [0,0] as a subarray.
There is no occurrence of a subarray with a size more than 2 filled with 0. Therefore, we return 6.
#code:
class Solution {
public:
    long long zeroFilledSubarray(vector<int>& nums) {
        long long cnt = 0, c = 1;
        for (int i = 0; i < nums.size() - 1; i++) {
            if (nums[i] == 0) {
                if (nums[i + 1] == 0) {
                    c++;
                } else if (nums[i] != nums[i + 1]) {
                    int total_subarray = (c * (c + 1)) / 2;
                    cnt += total_subarray;
                    c = 1;
                }
            }
        }
        //total consective k 0 contribute k*(k+1)/2 subarrays
        //for last steak
        if (nums.back() == 0) {
            cnt += (c * (c + 1)) / 2;
        }
        return cnt;
    }
};
