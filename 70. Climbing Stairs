Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
#code:
class Solution {
private:
    int solve(int n , vector<int>& dp) {
        // base case
        if (n == 0)
            return 0;
        if (n == 1)
            return 1;
        if(n==2) return 2;

        if(dp[n] != -1) return dp[n];

        int onestep = solve(n - 1,dp); //in one step u  jump from n-1
        int twostep = solve(n - 2,dp); //in two step u jump from n-2
        dp[n] = onestep + twostep;
        return dp[n];
    }

public:
    int climbStairs(int n) { 
        vector<int>dp(n+1,-1);
        return solve(n,dp);
    }
};
