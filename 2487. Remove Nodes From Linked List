Remove every node which has a node with a greater value anywhere to the right side of it.
Input: head = [5,2,13,3,8]
Output: [13,8]
Explanation: The nodes that should be removed are 5, 2 and 3.
- Node 13 is to the right of node 5.
- Node 13 is to the right of node 2.
- Node 8 is to the right of node 3.
#code:
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* removeNodes(ListNode* head) {
        ListNode* curr = head;
        stack<ListNode*>st;

        while(curr != NULL){
            while(!st.empty() && st.top() -> val < curr -> val){
                    st.pop();
                }
                 st.push(curr);
                 curr = curr -> next;
            }

            ListNode* nxt = NULL;
            while(!st.empty()){
                curr = st.top();
                st.pop();
                curr -> next = nxt;
                nxt = curr;
            }
             return curr;
        }
       // return curr;
    
};
