Input: nums = [2,1,3,3], k = 2
Output: [3,3]
Explanation:
The subsequence has the largest sum of 3 + 3 = 6.
#code:
class Solution {
public:
    vector<int> maxSubsequence(vector<int>& nums, int k) {
        vector<int> arr(nums);  // copy original array
        vector<int> ans;

        // Sort the copy in descending order
        sort(arr.rbegin(), arr.rend());

        // Get top k largest elements (can have duplicates)
        unordered_map<int, int> freq;
        for (int i = 0; i < k; i++) {
            freq[arr[i]]++;
        }

        // Traverse original nums and pick elements in order that are in freq
        for (int i = 0; i < nums.size(); i++) {
            if (freq[nums[i]] > 0) {
                ans.push_back(nums[i]);
                freq[nums[i]]--;
            }
        }

        return ans;
    }
};
