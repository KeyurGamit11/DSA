Input: nums = [1,2,1,2,1,1,1]
Output: 5
Explanation: 
The longest product equivalent subarray is [1, 2, 1, 1, 1], where prod([1, 2, 1, 1, 1]) = 2, gcd([1, 2, 1, 1, 1]) = 1, and lcm([1, 2, 1, 1, 1]) = 2.
#code:
class Solution {
public:
    int maxLength(vector<int>& nums) {
        int ans=2; 
        int n=nums.size();
        for(int i=0; i<n; i++){
            long long prod=nums[i],gc=nums[i],lc=nums[i];
            for(int j=i+1; j<n; j++){
                 
                prod *= nums[j];
                gc = gcd(gc,nums[j]);
                
                lc = (nums[j]*lc)/gcd(lc,nums[j]);
                if(prod != gc*lc){
                    break;
                }
                ans = max(ans,j-i+1);
                
            }
        }
        return ans;
    }
};
